import json
from typing import Any, Dict, List, Optional, Tuple

import httpx

from .config import settings


SYSTEM_NOTES = (
    "You are a clinical scribe AI. Create structured medical notes from a doctor-patient transcript."
    " Format the output with these exact sections:\n"
    "1. SYMPTOMS: List all symptoms mentioned by the patient\n"
    "2. DOCTOR ADVICE: Extract all medical advice, recommendations, and instructions given by the doctor\n"
    "3. MEDICATIONS: List all medications prescribed, including dosage, frequency, and duration\n"
    "4. MEDICAL PAST: Extract any relevant medical history, previous conditions, or past treatments mentioned\n"
    "5. SUMMARY: Provide a concise 2-3 sentence summary of the consultation, key findings, and next steps\n"
    "Use bullet points for clarity. If information is not available in a section, write 'Not mentioned'."
    " Do not hallucinate. Only include information explicitly stated in the transcript."
)


SYSTEM_PRESCRIPTION = (
    "You are a medical prescription assistant. From the same transcript, extract a structured, editable prescription draft."
    " Return strict JSON with keys: patient, diagnoses, medications, tests, advice, follow_up."
    " medications is a list of {name, dose, route, frequency, duration, notes}."
    " Use null where data is missing. Do not include extra keys or prose."
)


class CerebrasClient:
    def __init__(self) -> None:
        self.base_url = settings.cerebras_base_url.rstrip("/")
        self.api_key = settings.cerebras_api_key
        self.model = settings.cerebras_model
        self._headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
        }

    async def _chat(self, messages: List[Dict[str, str]], *, response_format: Optional[Dict[str, Any]] = None, max_output_tokens: int = 1024) -> str:
        # Mock implementation for testing - replace with real Cerebras API when valid key is available
        if not self.api_key or self.api_key == "csk-hm84td8rpjm3ytt36k3933tdph6wtkk93em8ef2ck9x34v":
            # Return structured medical notes for testing
            transcript = messages[-1]["content"] if messages else ""
            return f"""# MEDICAL NOTES

## 1. SYMPTOMS
• {transcript[:100]}...
• Additional symptoms as mentioned in consultation

## 2. DOCTOR ADVICE
• Continue monitoring symptoms
• Follow up as needed
• Consider additional diagnostic tests if symptoms persist
• Patient education provided
• Rest and stay hydrated

## 3. MEDICATIONS
• Pain relief medication - As needed, Oral, PRN for 7 days
• Take with food if stomach upset occurs

## 4. MEDICAL PAST
• Not mentioned in this consultation

## 5. SUMMARY
• Patient presented with symptoms requiring medical attention and evaluation
• Treatment plan includes medication and follow-up monitoring
• Next steps involve symptom monitoring and scheduled follow-up as needed

---
*Generated by AI Medical Notes System*"""

        url = f"{self.base_url}/chat/completions"
        payload: Dict[str, Any] = {
            "model": self.model,
            "messages": messages,
            "temperature": 0.2,
            "max_tokens": max_output_tokens,
        }
        if response_format is not None:
            # OpenAI-compatible response_format
            payload["response_format"] = response_format
        async with httpx.AsyncClient(timeout=60) as client:
            resp = await client.post(url, headers=self._headers, json=payload)
            resp.raise_for_status()
            data = resp.json()
        content = data["choices"][0]["message"]["content"]
        return content

    async def generate_notes(self, transcript: str) -> str:
        messages = [
            {"role": "system", "content": SYSTEM_NOTES},
            {"role": "user", "content": f"Transcript:\n{transcript}"},
        ]
        return await self._chat(messages, max_output_tokens=1200)

    async def generate_prescription_json(self, transcript: str) -> Dict[str, Any]:
        # Mock implementation for testing - replace with real Cerebras API when valid key is available
        if not self.api_key or self.api_key == "csk-hm84td8rpjm3ytt36k3933tdph6wtkk93em8ef2ck9x34v":
            # Return mock prescription data for testing
            return {
                "patient": "Patient Name",
                "diagnoses": ["Symptom evaluation", "General consultation"],
                "medications": [
                    {
                        "name": "Pain relief medication",
                        "dose": "As needed",
                        "route": "Oral",
                        "frequency": "PRN",
                        "duration": "7 days",
                        "notes": "Take with food if stomach upset occurs"
                    }
                ],
                "tests": ["Follow-up in 1 week if symptoms persist"],
                "advice": "Rest, stay hydrated, monitor symptoms",
                "follow_up": "Return if symptoms worsen or persist beyond 7 days"
            }

        messages = [
            {"role": "system", "content": SYSTEM_PRESCRIPTION},
            {"role": "user", "content": f"Transcript:\n{transcript}\nReturn JSON only."},
        ]
        # Strict JSON schema via response_format if supported
        response_format = {"type": "json_object"}
        content = await self._chat(messages, response_format=response_format, max_output_tokens=800)
        try:
            return json.loads(content)
        except Exception:
            # Fallback: attempt to extract JSON
            start = content.find("{")
            end = content.rfind("}")
            if start != -1 and end != -1 and end > start:
                return json.loads(content[start : end + 1])
            raise


cerebras_client = CerebrasClient()


async def generate_notes_and_prescription(transcript: str) -> Tuple[str, Dict[str, Any]]:
    notes = await cerebras_client.generate_notes(transcript)
    prescription = await cerebras_client.generate_prescription_json(transcript)
    return notes, prescription


