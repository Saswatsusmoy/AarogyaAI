datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  passwordHash String
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  patientProfile PatientProfile?
  doctorProfile  DoctorProfile?

  // Appointments
  patientAppointments Appointment[] @relation("PatientAppointments")
  doctorAppointments  Appointment[] @relation("DoctorAppointments")

  // Chat History
  chatHistory ChatHistory[]
}

enum Role {
  doctor
  patient
}

model PatientProfile {
  id        String  @id @default(cuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])

  name      String?
  age       Int?
  gender    String?
  weight    Float?
  height    Float?
  phone     String?
  allergies String?
  ailments  String?
  scribeNotes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DoctorProfile {
  id           String  @id @default(cuid())
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id])

  name         String?
  age          Int?
  phone        String?
  department   String?
  speciality   String?
  signature    String?  // Text signature or base64 encoded image
  signatureType String? // "text" or "image"
  clinicName   String?  // Clinic name
  clinicAddress String? // Clinic address
  clinicPhone  String?  // Clinic phone

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Appointment {
  id          String         @id @default(cuid())
  patientId   String
  doctorId    String
  patient     User           @relation(name: "PatientAppointments", fields: [patientId], references: [id])
  doctor      User           @relation(name: "DoctorAppointments", fields: [doctorId], references: [id])
  scheduledAt DateTime
  reason      String?
  status      AppointmentStatus @default(PENDING)
  notes       String?
  aiNotes     String?        @map("AI-Notes")
  prescription String?       // JSON string containing prescription details
  prescriptionPdf String?     // Base64 encoded PDF content
  recommendedTests String?   // JSON array of test IDs
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  transcriptions AppointmentTranscription[]
}

model AppointmentTranscription {
  id            String      @id @default(cuid())
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  text          String
  createdAt     DateTime    @default(now())
}

model MedicalTests {
  TestID   String @id @default(cuid())
  TestName String @unique
}

model ChatHistory {
  id        String   @id @default(cuid())
  patientId String
  patient   User     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  message   String
  isUser    Boolean  // true for user messages, false for bot responses
  createdAt DateTime @default(now())

  @@index([patientId, createdAt])
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  DECLINED
  COMPLETED
  CANCELLED
}
